#!/usr/bin/env python3
"""
start_services.py

This script starts the Supabase stack first, waits for it to initialize, and then starts
the local AI stack. Both stacks use the same Docker Compose project name ("localai")
so they appear together in Docker Desktop.
"""

import os
import subprocess
import shutil
import time
import argparse
import platform
import sys
import secrets
import string
import re
import random
import socket

def generate_random_string(length=32):
    """Generate a random string of specified length."""
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def save_secrets_to_file(env_vars):
    """Save all secrets and sensitive information to secrets.txt."""
    secrets_file = 'secrets.txt'
    sensitive_keys = [
        'N8N_ENCRYPTION_KEY',
        'N8N_USER_MANAGEMENT_JWT_SECRET',
        'POSTGRES_PASSWORD',
        'JWT_SECRET',
        'ANON_KEY',
        'SERVICE_ROLE_KEY',
        'DASHBOARD_PASSWORD',
        'FLOWISE_PASSWORD',
        'GRAFANA_ADMIN_PASS'
    ]
    
    with open(secrets_file, 'w') as f:
        f.write("=== Local AI Stack Secrets ===\n")
        f.write("Generated on: " + time.strftime("%Y-%m-%d %H:%M:%S") + "\n\n")
        
        for key in sensitive_keys:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        
        f.write("\n=== Service URLs ===\n")
        domain = env_vars.get('DOMAIN_NAME', 'kwintes.cloud')
        f.write(f"n8n: https://{env_vars.get('N8N_HOSTNAME', f'n8n.{domain}')}\n")
        f.write(f"Supabase: https://{env_vars.get('SUPABASE_HOSTNAME', f'supabase.{domain}')}\n")
        f.write(f"Flowise: https://{env_vars.get('FLOWISE_HOSTNAME', f'flowise.{domain}')}\n")
        f.write(f"Grafana: https://grafana.{domain}\n")
        f.write(f"Prometheus: https://prometheus.{domain}\n")
        f.write(f"Whisper API: https://whisper.{domain}\n")
        f.write(f"Qdrant API: https://qdrant.{domain}\n")
        
        f.write("\n=== Default Credentials ===\n")
        f.write(f"Grafana: {env_vars.get('GRAFANA_ADMIN_USER', 'admin')} / {env_vars.get('GRAFANA_ADMIN_PASS', '')}\n")
        f.write(f"Flowise: {env_vars.get('FLOWISE_USERNAME', 'admin')} / {env_vars.get('FLOWISE_PASSWORD', '')}\n")
        f.write(f"Supabase Dashboard: {env_vars.get('DASHBOARD_USERNAME', 'supabase')} / {env_vars.get('DASHBOARD_PASSWORD', '')}\n")
    
    print(f"\nSecrets have been saved to {secrets_file}")
    print("IMPORTANT: Keep this file secure and do not commit it to version control!")

def create_env_from_example():
    """Create .env file from .env.example with user instructions."""
    env_example_path = '.env.example'
    env_path = '.env'
    
    if not os.path.exists(env_example_path):
        print(f"Error: {env_example_path} not found. Please create it first.")
        return False
    
    if os.path.exists(env_path):
        overwrite = input(f"\n{env_path} already exists. Overwrite? (y/n): ").lower()
        if overwrite != 'y':
            print(f"Using existing {env_path} file.")
            return True
    
    # Load default values from .env.example
    default_values = {}
    with open(env_example_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                default_values[key.strip()] = value.strip()
    
    # Create a new .env file with the default values
    with open(env_path, 'w') as f:
        f.write("# This file was generated by start_services.py\n")
        f.write("# Default values are taken from .env.example\n\n")
        
        for key, value in default_values.items():
            f.write(f"{key}={value}\n")
    
    print(f"\n=== Environment Setup ===")
    print(f"A copy of {env_example_path} has been made as {env_path}")
    print("IMPORTANT: Please edit this file and update the following values:")
    print("  1. N8N_ENCRYPTION_KEY and N8N_USER_MANAGEMENT_JWT_SECRET with secure random strings")
    print("  2. All Supabase configuration values (POSTGRES_PASSWORD, JWT_SECRET, etc.)")
    print("  3. Set your domain in *_HOSTNAME variables and LETSENCRYPT_EMAIL")
    print("\nAfter updating these values, run this script again.")
    
    # Ask user if they want to edit the file now
    edit_now = input("\nWould you like to edit .env file now? (y/n): ").lower()
    if edit_now == 'y':
        # Try to open with default editor
        try:
            if platform.system() == 'Windows':
                os.system(f"notepad {env_path}")
            elif platform.system() == 'Darwin':  # macOS
                os.system(f"open {env_path}")
            else:  # Linux and others
                editor = os.environ.get('EDITOR', 'nano')
                os.system(f"{editor} {env_path}")
        except Exception as e:
            print(f"Error opening editor: {e}")
            print(f"Please edit {env_path} manually.")
    
    return True

def create_interactive_env():
    """Create .env file interactively with user input."""
    print("\n=== Interactive Environment Setup ===")
    
    env_example_path = '.env.example'
    
    # Load default values from .env.example if it exists
    default_values = {}
    if os.path.exists(env_example_path):
        with open(env_example_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    default_values[key.strip()] = value.strip()
        print("Loaded default values from .env.example")
    
    # Add generated values for keys that need them
    env_vars = {
        # n8n Configuration
        'N8N_ENCRYPTION_KEY': default_values.get('N8N_ENCRYPTION_KEY', generate_random_string(32)),
        'N8N_USER_MANAGEMENT_JWT_SECRET': default_values.get('N8N_USER_MANAGEMENT_JWT_SECRET', generate_random_string(32)),
        
        # n8n domain settings
        'N8N_HOST': default_values.get('N8N_HOST', 'n8n.kwintes.cloud'),
        'N8N_PROTOCOL': default_values.get('N8N_PROTOCOL', 'https'),
        'N8N_PORT': default_values.get('N8N_PORT', '8008'),
        'N8N_EDITOR_BASE_URL': default_values.get('N8N_EDITOR_BASE_URL', 'https://n8n.kwintes.cloud'),
        
        # Supabase Configuration
        'POSTGRES_PASSWORD': default_values.get('POSTGRES_PASSWORD', generate_random_string(16)),
        'JWT_SECRET': default_values.get('JWT_SECRET', generate_random_string(32)),
        'ANON_KEY': default_values.get('ANON_KEY', generate_random_string(32)),
        'SERVICE_ROLE_KEY': default_values.get('SERVICE_ROLE_KEY', generate_random_string(32)),
        'DASHBOARD_USERNAME': default_values.get('DASHBOARD_USERNAME', 'supabase'),
        'DASHBOARD_PASSWORD': default_values.get('DASHBOARD_PASSWORD', generate_random_string(16)),
        'POOLER_TENANT_ID': default_values.get('POOLER_TENANT_ID', '1001'),
        'POSTGRES_HOST': default_values.get('POSTGRES_HOST', 'db'),
        'POSTGRES_DB': default_values.get('POSTGRES_DB', 'postgres'),
        'POSTGRES_PORT': default_values.get('POSTGRES_PORT', '5432'),
        
        # URL Settings
        'DOMAIN_NAME': default_values.get('DOMAIN_NAME', 'kwintes.cloud'),
        'SUBDOMAIN': default_values.get('SUBDOMAIN', 'n8n'),
        'N8N_HOSTNAME': default_values.get('N8N_HOSTNAME', 'n8n.kwintes.cloud'),
        'WEBUI_HOSTNAME': default_values.get('WEBUI_HOSTNAME', 'openwebui.kwintes.cloud'),
        'FLOWISE_HOSTNAME': default_values.get('FLOWISE_HOSTNAME', 'flowise.kwintes.cloud'),
        'SUPABASE_HOSTNAME': default_values.get('SUPABASE_HOSTNAME', 'supabase.kwintes.cloud'),
        'OLLAMA_HOSTNAME': default_values.get('OLLAMA_HOSTNAME', 'ollama.kwintes.cloud'),
        'SEARXNG_HOSTNAME': default_values.get('SEARXNG_HOSTNAME', 'searxng.kwintes.cloud'),
        'LETSENCRYPT_EMAIL': default_values.get('LETSENCRYPT_EMAIL', 'admin@kwintes.cloud'),
        
        # Flowise Configuration
        'FLOWISE_USERNAME': default_values.get('FLOWISE_USERNAME', 'admin'),
        'FLOWISE_PASSWORD': default_values.get('FLOWISE_PASSWORD', generate_random_string(12)),
        'ENABLE_METRICS': default_values.get('ENABLE_METRICS', 'true'),
        'METRICS_PROVIDER': default_values.get('METRICS_PROVIDER', 'prometheus'),
        'METRICS_INCLUDE_NODE_METRICS': default_values.get('METRICS_INCLUDE_NODE_METRICS', 'true'),
        
        # Qdrant Configuration
        'QDRANT_HOST': default_values.get('QDRANT_HOST', 'qdrant'),
        'QDRANT_PORT': default_values.get('QDRANT_PORT', '6333'),
        
        # Monitoring Configuration
        'PROMETHEUS_PORT': default_values.get('PROMETHEUS_PORT', '9090'),
        'GRAFANA_PORT': default_values.get('GRAFANA_PORT', '3005'),
        'GRAFANA_ADMIN_USER': default_values.get('GRAFANA_ADMIN_USER', 'admin'),
        'GRAFANA_ADMIN_PASS': default_values.get('GRAFANA_ADMIN_PASS', generate_random_string(16)),
        'DATA_FOLDER': default_values.get('DATA_FOLDER', './data'),
        
        # System Configuration
        'TZ': default_values.get('TZ', 'Germany/Berlin'),
        'LANG': default_values.get('LANG', 'en_US.UTF-8'),
        'LC_ALL': default_values.get('LC_ALL', 'en_US.UTF-8'),
        
        # Python Configuration
        'PYTHON_PATH': default_values.get('PYTHON_PATH', '/usr/bin/python3')
    }
    
    # Import any other values from .env.example that weren't explicitly included above
    for key, value in default_values.items():
        if key not in env_vars:
            env_vars[key] = value
    
    # Interactive prompts for critical values
    print("\nPlease enter the following values (press Enter to use defaults):")
    
    critical_vars = [
        'DOMAIN_NAME',
        'SUBDOMAIN',
        'N8N_HOST',
        'N8N_HOSTNAME',
        'SUPABASE_HOSTNAME',
        'LETSENCRYPT_EMAIL',
        'FLOWISE_USERNAME',
        'FLOWISE_PASSWORD',
        'GRAFANA_ADMIN_USER',
        'GRAFANA_ADMIN_PASS',
        'TZ',
        'DASHBOARD_PASSWORD'
    ]
    
    for var in critical_vars:
        default = env_vars[var]
        value = input(f"{var} [{default}]: ").strip()
        if value:
            env_vars[var] = value
    
    # Write to .env file
    with open('.env', 'w') as f:
        f.write("# This file was generated by start_services.py\n")
        f.write("# Default values are taken from .env.example\n\n")
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    # Save secrets to secrets.txt
    save_secrets_to_file(env_vars)
    
    print("\n.env file created successfully!")
    print("IMPORTANT: Check secrets.txt for all sensitive information!")
    return True

def initialize_monitoring():
    """Initialize monitoring services and create necessary configurations."""
    print("\n=== Initializing Monitoring Services ===")
    
    # Create Prometheus configuration if it doesn't exist
    if not os.path.exists('prometheus.yml'):
        with open('prometheus.yml', 'w') as f:
            f.write('''global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  - job_name: 'n8n'
    static_configs:
      - targets: ['n8n:8000']
    metrics_path: '/metrics'
  - job_name: 'qdrant'
    static_configs:
      - targets: ['qdrant:6333']
    metrics_path: '/metrics'
  - job_name: 'whisper'
    static_configs:
      - targets: ['whisper:9000']
    metrics_path: '/metrics'
  - job_name: 'ollama'
    static_configs:
      - targets: ['ollama:11434']
    metrics_path: '/metrics'
''')
        print("Created prometheus.yml")

def run_command(cmd, cwd=None):
    """Run a shell command and print it."""
    print("Running:", " ".join(cmd))
    subprocess.run(cmd, cwd=cwd, check=True)

def clone_supabase_repo():
    """Clone the Supabase repository using sparse checkout if not already present."""
    if not os.path.exists("supabase"):
        print("Cloning the Supabase repository...")
        run_command([
            "git", "clone", "--filter=blob:none", "--no-checkout",
            "https://github.com/supabase/supabase.git"
        ])
        os.chdir("supabase")
        run_command(["git", "sparse-checkout", "init", "--cone"])
        run_command(["git", "sparse-checkout", "set", "docker"])
        run_command(["git", "checkout", "master"])
        os.chdir("..")
    else:
        print("Supabase repository already exists, updating...")
        os.chdir("supabase")
        run_command(["git", "pull"])
        os.chdir("..")

def prepare_supabase_env():
    """Copy .env to .env in supabase/docker."""
    if not os.path.exists('.env'):
        print("Error: .env file not found. Please create it first.")
        return False
        
    env_path = os.path.join("supabase", "docker", ".env")
    src_env_path = os.path.join(".env")
    
    # Make sure the target directory exists
    os.makedirs(os.path.dirname(env_path), exist_ok=True)
    
    print("Copying .env in root to .env in supabase/docker...")
    shutil.copyfile(src_env_path, env_path)
    
    print("Supabase environment prepared successfully.")
    return True

def check_docker_compose():
    """Check if 'docker compose' or 'docker-compose' should be used."""
    # Special handling for Ubuntu 24.04
    try:
        # Check if this is Ubuntu 24.04
        with open('/etc/os-release', 'r') as f:
            os_info = f.read()
            if 'VERSION="24.04"' in os_info and 'Ubuntu' in os_info:
                print("Detected Ubuntu 24.04 - using docker-compose...")
                # For Ubuntu 24.04, directly use docker-compose if it exists
                if os.path.exists('/usr/local/bin/docker-compose'):
                    return ['/usr/local/bin/docker-compose']
                elif subprocess.run(["which", "docker-compose"], capture_output=True, text=True).returncode == 0:
                    return ["docker-compose"]
                else:
                    # Try to install docker-compose automatically
                    try:
                        print("Attempting to install docker-compose...")
                        install_cmd = [
                            "curl", "-L", 
                            "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64", 
                            "-o", "/usr/local/bin/docker-compose"
                        ]
                        subprocess.run(install_cmd, check=True)
                        subprocess.run(["chmod", "+x", "/usr/local/bin/docker-compose"], check=True)
                        print("Successfully installed docker-compose")
                        return ["/usr/local/bin/docker-compose"]
                    except subprocess.CalledProcessError as e:
                        print(f"Error installing docker-compose: {e}")
                        print("Please install docker-compose manually")
                        sys.exit(1)
    except FileNotFoundError:
        # Not a Linux system or /etc/os-release doesn't exist
        pass
    except Exception as e:
        print(f"Warning: Error checking OS version: {e}")
    
    # Regular detection process for other systems
    try:
        # Check if 'docker compose' is available (Docker CLI plugin)
        subprocess.run(["docker", "compose", "version"], 
                       capture_output=True, check=True)
        return ["docker", "compose"]
    except subprocess.CalledProcessError:
        # Fall back to 'docker-compose' command
        try:
            subprocess.run(["docker-compose", "--version"], 
                           capture_output=True, check=True)
            return ["docker-compose"]
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("Error: Neither 'docker compose' nor 'docker-compose' is available.")
            print("Please install Docker Compose: https://docs.docker.com/compose/install/")
            sys.exit(1)

def stop_existing_containers():
    """Stop any existing containers."""
    print("Stopping any existing containers...")
    
    # Try to stop containers using the basic docker-compose file first
    try:
        docker_compose_cmd = check_docker_compose()
        base_cmd = docker_compose_cmd + ["-p", "localai", "-f", "docker-compose.yml", "down"]
        print("Stopping main containers...")
        run_command(base_cmd)
        print("Successfully stopped main containers")
    except subprocess.CalledProcessError as e:
        print(f"Warning: Error stopping main containers: {e}")
        print("Continuing with startup process anyway...")
    
    # Try to stop Supabase containers separately if they exist
    if os.path.exists("supabase/docker/docker-compose.yml"):
        try:
            docker_compose_cmd = check_docker_compose()
            supabase_cmd = docker_compose_cmd + ["-p", "supabase", "-f", "supabase/docker/docker-compose.yml", "down"]
            print("Stopping Supabase containers...")
            run_command(supabase_cmd)
            print("Successfully stopped Supabase containers")
        except subprocess.CalledProcessError as e:
            print(f"Warning: Error stopping Supabase containers: {e}")
            print("Continuing with startup process anyway...")
    else:
        print("Supabase directory not found, skipping its shutdown...")
    
    # Ensure all containers are stopped by checking for any with our project name
    try:
        print("Checking for any remaining containers...")
        ps_cmd = ["docker", "ps", "-a", "--filter", "name=localai", "--format", "{{.Names}}"]
        result = subprocess.run(ps_cmd, capture_output=True, text=True, check=False)
        if result.stdout.strip():
            print(f"Found remaining containers: {result.stdout.strip()}")
            print("Attempting to force stop them...")
            for container in result.stdout.strip().split('\n'):
                if container:
                    try:
                        subprocess.run(["docker", "rm", "-f", container.strip()], check=False)
                    except Exception as e:
                        print(f"Warning: Could not remove container {container}: {e}")
    except Exception as e:
        print(f"Warning: Error checking for remaining containers: {e}")
        
    print("Container shutdown process completed, proceeding with startup...")

def start_supabase():
    """Start the Supabase services (using its compose file)."""
    print("Starting Supabase services...")
    docker_compose_cmd = check_docker_compose()
    cmd = docker_compose_cmd + [
        "-p", "localai", 
        "-f", "supabase/docker/docker-compose.yml", 
        "up", "-d"
    ]
    run_command(cmd)

def start_local_ai(profile="cpu"):
    """Start the Local AI stack with the specified profile."""
    print(f"Starting Local AI stack with {profile.upper()} profile...")
    
    # Ensure backup directories exist for n8n
    os.makedirs("n8n/backup/workflows", exist_ok=True)
    os.makedirs("n8n/backup/credentials", exist_ok=True)

    # Create necessary directories and settings
    os.makedirs("shared", exist_ok=True)
    
    # Check if SearXNG directory exists
    searxng_exists = os.path.exists("searxng")
    if searxng_exists:
        print("SearXNG directory found - configuring...")
        generate_searxng_secret_key()
        check_and_fix_docker_compose_for_searxng()
    else:
        print("SearXNG directory not found - skipping its configuration")
    
    docker_compose_cmd = check_docker_compose()
    
    # Start services up using the appropriate docker compose command
    print("Starting services...")
    try:
        cmd = docker_compose_cmd + [
            "-p", "localai",
            "-f", "docker-compose.yml",
            "--profile", profile,
            "up", "-d"
        ]
        
        # Run the command
        print(f"Running command: {' '.join(cmd)}")
        
        # Run with shell=True on Windows to handle potential path issues
        if platform.system() == 'Windows':
            process = subprocess.run(
                " ".join(cmd), 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE,
                shell=True,
                text=True,
                check=False
            )
        else:
            process = subprocess.run(
                cmd, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE, 
                text=True,
                check=False
            )
        
        # Check if there were any errors
        if process.returncode != 0:
            print(f"Warning: Docker Compose returned non-zero exit code: {process.returncode}")
            print("Error output:")
            print(process.stderr)
            
            # Check if it's just n8n-import failing, which is expected if SearXNG is removed
            if "n8n-import" in process.stderr and "exited with code 1" in process.stderr:
                print("Note: n8n-import service failed, but this might be expected if SearXNG was removed.")
                print("Checking if n8n is still running...")
                
                # Give containers a moment to start up
                time.sleep(5)
                
                # Check if n8n container is running despite the error
                check_cmd = ["docker", "ps", "--filter", "name=n8n", "--format", "{{.Names}}"]
                result = subprocess.run(check_cmd, stdout=subprocess.PIPE, text=True, check=False)
                
                if "n8n" in result.stdout:
                    print("Good news! The n8n container is running. The stack should be operational.")
                else:
                    print("Warning: n8n container is not running. The stack may not be fully operational.")
                    print("Attempting to start services without the n8n-import service...")
                    
                    # Try starting again without the n8n-import service (it will be skipped because of its profile)
                    retry_cmd = docker_compose_cmd + [
                        "-p", "localai",
                        "-f", "docker-compose.yml",
                        "--profile", profile,
                        "up", "-d"
                    ]
                    subprocess.run(retry_cmd, check=False)
            else:
                print("There was an error starting some services. Check the error messages above.")
        else:
            print("All services started successfully!")
    except Exception as e:
        print(f"Error starting services: {e}")
        print("Some services may not be running. Check Docker status.")
    
    # Try to load the .env file to get current environment variables
    try:
        load_env_file()
    except Exception as e:
        print(f"Warning: Could not load environment variables: {e}")
    
    # Print access URLs
    try:
        print_access_urls()
    except Exception as e:
        print(f"Warning: Could not print access URLs: {e}")
        print("Please check your Docker containers status with 'docker ps'")

def generate_searxng_secret_key():
    """Generate a secret key for SearXNG if one doesn't exist."""
    # Skip if SearXNG directory doesn't exist
    if not os.path.exists("searxng"):
        print("SearXNG directory not found, skipping secret key generation.")
        return
        
    print("Checking SearXNG secret key...")
    settings_path = "searxng/settings.yml"
    secret_key_path = "searxng/secret_key"
    
    # Create settings file if it doesn't exist
    if not os.path.exists(settings_path):
        print("Creating default SearXNG settings file...")
        os.makedirs("searxng", exist_ok=True)
        with open(settings_path, "w") as f:
            f.write("""general:
    instance_name: "SearXNG"
    privacypolicy_url: false
    donation_url: false
    enable_metrics: true

search:
    safe_search: 0
    autocomplete: ""

server:
    secret_key: "{secret_key}"  # Will be replaced with actual key
    limiter: false
    image_proxy: true

ui:
    static_use_hash: true
    default_locale: "en"
    default_theme: "simple"
    theme_args:
        simple_style: "dark"

redis:
    url: redis://redis:6379/0
""")
    
    # Generate secret key if it doesn't exist
    if not os.path.exists(secret_key_path):
        print("Generating new SearXNG secret key...")
        secret_key = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(32))
        with open(secret_key_path, "w") as f:
            f.write(secret_key)
    else:
        with open(secret_key_path, "r") as f:
            secret_key = f.read().strip()
    
    # Update settings file with secret key
    if os.path.exists(settings_path):
        with open(settings_path, "r") as f:
            settings = f.read()
        
        settings = settings.replace("{secret_key}", secret_key)
        
        with open(settings_path, "w") as f:
            f.write(settings)
    
    print("SearXNG secret key setup complete.")

def check_and_fix_docker_compose_for_searxng():
    """Check and fix the docker-compose.yml file for SearXNG configuration."""
    # Skip if SearXNG directory doesn't exist
    if not os.path.exists("searxng"):
        print("SearXNG directory not found, skipping docker-compose check.")
        return
        
    print("Checking docker-compose.yml for SearXNG configuration...")
    
    docker_compose_path = "docker-compose.yml"
    
    if not os.path.exists(docker_compose_path):
        print(f"Warning: {docker_compose_path} not found. Cannot check SearXNG configuration.")
        return
    
    # Read the docker-compose.yml file
    with open(docker_compose_path, "r") as f:
        docker_compose = f.read()
    
    # Check if SearXNG service is defined
    if "searxng:" not in docker_compose:
        print("SearXNG service not found in docker-compose.yml. No changes needed.")
        return
    
    # Check if uwsgi.ini volume is properly configured
    if "- ./searxng/uwsgi.ini:/etc/uwsgi/searxng.ini:ro" not in docker_compose:
        # Fix the volume configuration
        docker_compose = re.sub(
            r'(volumes:.*?\n\s+- \./searxng:/etc/searxng:rw\n)',
            r'\1      - ./searxng/uwsgi.ini:/etc/uwsgi/searxng.ini:ro\n',
            docker_compose,
            flags=re.DOTALL
        )
        
        # Write the updated file
        with open(docker_compose_path, "w") as f:
            f.write(docker_compose)
        
        print("Updated docker-compose.yml with proper SearXNG uwsgi.ini volume configuration.")
    else:
        print("SearXNG configuration in docker-compose.yml is correct.")

def create_data_directories():
    """Create necessary data directories for mounted volumes."""
    print("Creating data directories...")
    
    # Create base data directory if it doesn't exist
    data_dir = os.environ.get('DATA_FOLDER', './data')
    if not os.path.exists(data_dir):
        os.makedirs(data_dir, exist_ok=True)
    
    # Create Grafana provisioning directories
    grafana_dir = os.path.join(data_dir, 'grafana', 'provisioning')
    for subdir in ['datasources', 'dashboards', 'notifiers', 'plugins']:
        full_path = os.path.join(grafana_dir, subdir)
        if not os.path.exists(full_path):
            os.makedirs(full_path, exist_ok=True)
    
    print(f"Created data directories in {data_dir}")

def load_env_file():
    """Load environment variables from .env file."""
    if not os.path.exists('.env'):
        print("Warning: .env file not found. Using default environment variables.")
        return
    
    try:
        print("Loading environment variables from .env file...")
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print("Environment variables loaded successfully.")
    except Exception as e:
        print(f"Error loading environment variables: {e}")
        raise

def print_access_urls():
    """Print URLs for accessing services."""
    domain = os.environ.get('DOMAIN_NAME', 'kwintes.cloud')
    ip_address = "localhost"  # Default for local development
    
    # Try to get the server's public IP if possible
    try:
        # This is a simple way to get the server's IP
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip_address = s.getsockname()[0]
        s.close()
    except:
        pass
    
    print("\n=== Access URLs ===")
    print(f"Dashboard: http://{ip_address}")
    print(f"n8n: http://{ip_address}:5678 or https://n8n.{domain}")
    print(f"WebUI: http://{ip_address}:8080 or https://openwebui.{domain}")
    print(f"Flowise: http://{ip_address}:3001 or https://flowise.{domain}")
    print(f"Supabase API: http://{ip_address}:8000 or https://supabase.{domain}")
    print(f"Supabase Studio: http://{ip_address}:54321 or https://studio.supabase.{domain}")
    print(f"Grafana: http://{ip_address}:3000 or https://grafana.{domain}")
    print(f"Prometheus: http://{ip_address}:9090 or https://prometheus.{domain}")
    print(f"Ollama API: http://{ip_address}:11434 or https://ollama.{domain}")
    print(f"Qdrant API: http://{ip_address}:6333 or https://qdrant.{domain}")
    
    # Only show SearXNG if it exists
    if os.path.exists("searxng"):
        print(f"SearXNG: http://{ip_address}:8088 or https://searxng.{domain}")
    
    print("\nFor more details, check the generated secrets.txt file.")
    print("All services should be accessible shortly. Some may take a few minutes to initialize.")

def check_docker_running():
    """Check if Docker is running and available."""
    try:
        # Simple check - try to run 'docker info'
        result = subprocess.run(
            ["docker", "info"], 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            check=False
        )
        
        if result.returncode != 0:
            print("ERROR: Docker is not running or not accessible.")
            print("Please ensure Docker Desktop is running (on Windows/Mac)")
            print("or the Docker daemon is started (on Linux).")
            
            if platform.system() == 'Windows':
                print("\nOn Windows, make sure:")
                print("1. Docker Desktop is running")
                print("2. You're running this script with administrator privileges")
                print("   (Right-click Command Prompt/PowerShell and select 'Run as administrator')")
            
            return False
        return True
    except Exception as e:
        print(f"ERROR: Could not check Docker status: {e}")
        print("Please ensure Docker is installed and running.")
        return False

def main():
    parser = argparse.ArgumentParser(description='Start the local AI and Supabase services.')
    parser.add_argument('--profile', choices=['cpu', 'gpu-nvidia', 'gpu-amd', 'none'], default='cpu',
                      help='Profile to use for Docker Compose (default: cpu)')
    parser.add_argument('--interactive', action='store_true', default=False,
                      help='Create .env file interactively with generated values')
    parser.add_argument('--use-example', action='store_true', default=True,
                      help='Create .env file from .env.example (default)')
    args = parser.parse_args()

    # Create .env file
    env_created = False
    if args.interactive:
        print("\nCreating .env file interactively. If you leave a field empty, the value from .env.example will be used.")
        env_created = create_interactive_env()
    elif args.use_example:
        print("\nCreating .env file from .env.example. Default values will be used for empty fields.")
        env_created = create_env_from_example()
    
    # Check if we should continue
    if not env_created or not os.path.exists('.env'):
        print("Error: No .env file created. Exiting.")
        sys.exit(1)
        
    # Check if the user wants to proceed with starting services
    proceed = input("\nDo you want to start services now? (y/n): ").lower()
    if proceed != 'y':
        print("Exiting without starting services. Run this script again when ready.")
        sys.exit(0)
    
    # Check if Docker is running before proceeding
    if not check_docker_running():
        print("Docker is not available. Please start Docker and try again.")
        sys.exit(1)
    
    # Initialize monitoring
    initialize_monitoring()
    
    # Create necessary data directories
    create_data_directories()
    
    # Clone Supabase repo and prepare environment
    clone_supabase_repo()
    if not prepare_supabase_env():
        print("Error preparing Supabase environment. Exiting.")
        sys.exit(1)
    
    # Generate SearXNG secret key and check docker-compose.yml
    generate_searxng_secret_key()
    check_and_fix_docker_compose_for_searxng()
    
    stop_existing_containers()
    
    # Start Supabase first
    start_supabase()
    
    # Give Supabase some time to initialize
    print("Waiting for Supabase to initialize...")
    time.sleep(10)
    
    # Then start the local AI services
    start_local_ai(args.profile)

if __name__ == "__main__":
    main()

# Created and maintained by Z4Y