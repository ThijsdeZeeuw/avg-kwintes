# Local AI Stack Setup Guide
# Created for Kwintes FA & 
# Includes: n8n, Ollama, Qdrant, Prometheus, Grafana, Whisper, Supabase, and Python

## Prerequisites
1. Install PuTTY (for Windows users)
   - Download from: https://www.putty.org/

2. Server Access Information
   - IP: 46.202.155.155
   - Username: root
   - Password: [Your server password]

3. Domain Information
   - Current domain: kwintes.cloud

4. Required Software
   - Docker (version 20.10.0 or later recommended)
   - Docker Compose (either built-in plugin or standalone binary)
   - Git
   - Python 3

## Server Setup Steps

### 1. Initial Server Setup
```bash
# Update system and install required packages
sudo apt update && sudo apt install -y nano git docker.io python3 python3-pip

# Install Docker Compose (standalone version if the docker compose plugin isn't available)
sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Install additional required packages
sudo apt install -y ffmpeg portaudio19-dev python3-pyaudio
```

### 2. Configure Firewall
```bash
# Enable and configure firewall
sudo ufw enable
sudo ufw allow 8000  # n8n
sudo ufw allow 3001  # Flowise
sudo ufw allow 3000  # Web UI & Grafana
sudo ufw allow 5678  # n8n webhook
sudo ufw allow 80    # HTTP
sudo ufw allow 443   # HTTPS
sudo ufw allow 8080  # SearXNG
sudo ufw allow 11434 # Ollama
sudo ufw allow 6333  # Qdrant
sudo ufw allow 9090  # Prometheus
sudo ufw allow 54321 # Supabase Studio
sudo ufw reload
```

### 3. Clone Repository
```bash
git clone https://github.com/Z4Y/avg-kwintes.git
cd avg-kwintes
```

### 4. Environment Setup
```bash
# Run the script with the --use-example flag to create the .env file from .env.example
python3 start_services.py --use-example

# The script will create a copy of .env.example as .env and prompt you to edit it
# Make sure to update the following values in the .env file:

# Core Configuration
# - DOMAIN_NAME: Your main domain (e.g., kwintes.cloud)
# - SUBDOMAIN: Subdomain for n8n (e.g., n8n)
# - N8N_HOST: Hostname for n8n (e.g., n8n.kwintes.cloud)
# - LETSENCRYPT_EMAIL: Your email for Let's Encrypt certificates

# Authentication
# - N8N_ENCRYPTION_KEY and N8N_USER_MANAGEMENT_JWT_SECRET: Secure random strings
# - FLOWISE_USERNAME and FLOWISE_PASSWORD: Credentials for Flowise
# - GRAFANA_ADMIN_USER and GRAFANA_ADMIN_PASS: Credentials for Grafana
# - DASHBOARD_USERNAME and DASHBOARD_PASSWORD: Credentials for Supabase

# Supabase Configuration
# - POSTGRES_PASSWORD: Secure password for PostgreSQL
# - JWT_SECRET: JWT secret for Supabase (at least 32 characters)
# - ANON_KEY and SERVICE_ROLE_KEY: API keys for Supabase

# System Configuration
# - TZ: Your timezone (e.g., Germany/Berlin)
# - DATA_FOLDER: Location for persistent data

# Alternatively, you can run with the --interactive flag to create .env interactively
# python3 start_services.py --interactive

# For a complete list of all environment variables, see ENV_VARIABLES.md
```

### 5. Start Services
```bash
# After configuring your .env file, run the script again to start all services
python3 start_services.py --profile cpu

# This will:
# 1. Clone the Supabase repository and prepare its environment
# 2. Set up SearXNG with a secure key
# 3. Start Supabase services first
# 4. Start the local AI stack (n8n, Ollama, etc.)
```

### 6. Verify Installation
```bash
# Check running containers
docker ps

# Verify services are accessible
curl http://localhost:8000/healthz  # n8n
curl http://localhost:6333/healthz  # Qdrant
curl http://localhost:9090/-/healthy  # Prometheus
curl http://localhost:54321  # Supabase Studio
```

## Accessing Services

1. n8n: https://n8n.kwintes.cloud
2. Web UI: https://openwebui.kwintes.cloud
3. Flowise: https://flowise.kwintes.cloud
4. Supabase: https://supabase.kwintes.cloud
5. Supabase Studio: http://localhost:54321 or https://studio.supabase.kwintes.cloud
6. Grafana: https://grafana.kwintes.cloud
7. Prometheus: https://prometheus.kwintes.cloud

## Supabase Configuration

Supabase provides a complete backend solution including:
- PostgreSQL database
- Authentication
- Storage
- Realtime subscriptions
- Edge Functions

After setup:
1. Access Supabase Studio at http://localhost:54321 or https://studio.supabase.kwintes.cloud
2. Log in with your DASHBOARD_USERNAME and DASHBOARD_PASSWORD
3. Create tables and set up your database schema
4. Configure authentication providers if needed

## External API Integration

To connect n8n to external APIs:

1. Access n8n at https://n8n.kwintes.cloud
2. Go to Settings > Credentials
3. Add your API credentials
4. Use the credentials in your workflows

## Monitoring Setup

1. Access Grafana at https://grafana.kwintes.cloud
   - Default credentials: admin/[password from .env]
   - Add Prometheus as a data source (URL: http://prometheus:9090)

2. Access Prometheus at https://prometheus.kwintes.cloud
   - View metrics and create alerts

## Notes

- All services are configured to use HTTPS through Caddy
- Ollama runs locally for AI processing
- Qdrant is available for vector storage
- Whisper is configured for local speech-to-text processing
- Python environment is set up for custom scripts and integrations
- Monitoring is configured with Prometheus and Grafana
- Supabase provides a complete backend solution with PostgreSQL 

## Troubleshooting

### Docker Compose Issues

If you encounter an error like:
```
unknown shorthand flag: 'p' in -p
```

This indicates your system is using an older or incompatible version of Docker Compose.

**Solutions:**

1. Install the standalone Docker Compose binary:
```bash
sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```

2. The updated start_services.py script automatically detects which Docker Compose command to use, so running it again after installing the standalone binary should work.

3. For manual commands, use the appropriate format based on what's installed:
```bash
# For Docker Compose plugin:
docker compose -p localai ...

# For standalone Docker Compose:
docker-compose -p localai ...
``` 