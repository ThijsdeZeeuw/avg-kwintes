version: "3.8"

volumes:
  n8n_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  caddy-data:
  caddy-config:
  valkey-data:
  prometheus_data:
  grafana_data:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=db
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - N8N_HOST=${N8N_HOST:-n8n.kwintes.cloud}
    - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
    - N8N_PORT=${N8N_PORT:-5678}
    - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL:-https://n8n.kwintes.cloud}
    - N8N_METRICS_ENABLED=true
    - N8N_METRICS_PORT=9090
    - WEBHOOK_URL=https://${SUBDOMAIN:-n8n}.${DOMAIN_NAME:-kwintes.cloud}/
    - GENERIC_TIMEZONE=${TZ:-Europe/Amsterdam}
    - NODE_FUNCTION_ALLOW_EXTERNAL=*
    - N8N_SECURE_COOKIE=false
    - N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN=true
  deploy:
    resources:
      limits:
        memory: 2G
      reservations:
        memory: 1G

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama
  networks:
    - monitoring
  deploy:
    resources:
      limits:
        memory: 8G
      reservations:
        memory: 4G

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull gemma3:12b; OLLAMA_HOST=ollama:11434 ollama pull granite-embedding:278m"
    # ;OLLAMA_HOST=ollama:11434 ollama pull granite3-guardian:8b; OLLAMA_HOST=ollama:11434 ollama pull granite3.1-dense:latest; OLLAMA_HOST=ollama:11434 ollama pull granite3.1-moe:3b; OLLAMA_HOST=ollama:11434 ollama pull granite3.2:latest; OLLAMA_HOST=ollama:11434 ollama pull jeffh/intfloat-multilingual-e5-large-instruct:f16; OLLAMA_HOST=ollama:11434 ollama pull llama3.2-vision; OLLAMA_HOST=ollama:11434 ollama pull minicpm-v:8b; OLLAMA_HOST=ollama:11434 ollama pull mistral-nemo:12b; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text:latest; OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b-instruct-q4_K_M; OLLAMA_HOST=ollama:11434 ollama pull reader-lm:latest
    # For a larger context length verison of the model, run these commands:
    # echo "FROM qwen2.5:7b-instruct-q4_K_M\n\nPARAMETER num_ctx 8096" > Modelfile
    # ollama create qwen2.5:7b-8k -f ./Modelfile
    # Change the name of the LLM and num_ctx as you see fit.
  networks:
    - monitoring

services:
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    environment:
      - PORT=3001
      - USERNAME=${FLOWISE_USERNAME:-admin}
      - PASSWORD=${FLOWISE_PASSWORD:-password}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PROVIDER=${METRICS_PROVIDER:-prometheus}
      - METRICS_PORT=9090
      - METRICS_INCLUDE_NODE_METRICS=${METRICS_INCLUDE_NODE_METRICS:-true}
      - TZ=${TZ:-Europe/Amsterdam}
    ports:
      - 3001:3001
    volumes:
      - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "8080:8080"
    volumes:
      - open-webui:/app/backend/data
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    networks:
      - monitoring

  n8n-import:
    image: n8nio/n8n:latest
    profiles: ["init"]
    container_name: n8n-import
    restart: "no"
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        mkdir -p /backup/credentials /backup/workflows
        echo "Waiting for n8n to be ready..."
        sleep 10
        echo "Importing credentials and workflows..."
        n8n import:credentials --separate --input=/backup/credentials || echo "No credentials to import or error occurred"
        n8n import:workflow --separate --input=/backup/workflows || echo "No workflows to import or error occurred"
        echo "Import completed"
    volumes:
      - ./n8n/backup:/backup
    networks:
      - monitoring

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  caddy:
    container_name: caddy
    image: docker.io/library/caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data:rw
      - caddy-config:/config:rw
    environment:
      - N8N_HOSTNAME=${N8N_HOSTNAME:-"n8n.${DOMAIN_NAME:-kwintes.cloud}"}
      - WEBUI_HOSTNAME=${WEBUI_HOSTNAME:-"openwebui.${DOMAIN_NAME:-kwintes.cloud}"}
      - FLOWISE_HOSTNAME=${FLOWISE_HOSTNAME:-"flowise.${DOMAIN_NAME:-kwintes.cloud}"}
      - OLLAMA_HOSTNAME=${OLLAMA_HOSTNAME:-"ollama.${DOMAIN_NAME:-kwintes.cloud}"}
      - SUPABASE_HOSTNAME=${SUPABASE_HOSTNAME:-"supabase.${DOMAIN_NAME:-kwintes.cloud}"}
      - SEARXNG_HOSTNAME=${SEARXNG_HOSTNAME:-"searxng.${DOMAIN_NAME:-kwintes.cloud}"}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-admin@kwintes.cloud}
      - TZ=${TZ:-Europe/Amsterdam}
      - DOMAIN_NAME=${DOMAIN_NAME:-kwintes.cloud}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - monitoring

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    ports:
      - 8088:8080  # Changed from 8080 to avoid conflict with OpenWebUI
    volumes:
      - ./searxng:/etc/searxng:rw
      - ./searxng/uwsgi.ini:/etc/uwsgi/searxng.ini:ro
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-searxng.${DOMAIN_NAME:-kwintes.cloud}}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"      
    networks:
      - monitoring
    depends_on:
      - redis

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama
    networks:
      - monitoring

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - monitoring

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"
    networks:
      - monitoring

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu
    networks:
      - monitoring

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
    networks:
      - monitoring

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Created and maintained by Z4Y